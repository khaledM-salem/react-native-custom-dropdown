[["/Users/khaledadel/Projects/react-native-dropdown/__tests__/Dropdown.test.tsx",{"fileContent":"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport Dropdown from '../src/Dropdown';\n\nexport interface DropdownProps {\n    data: Set<string>;\n    isDropdownOpen: boolean;\n    handleDataChange: (item: string) => void;\n}\n\n\n  describe('Dropdown component', () => {\n    it('renders correctly when open', () => {\n        const data: Set<string> = new Set(['Item 1', 'Item 2']);\n        const isDropdownOpen: boolean = true;\n        const handleDataChange: jest.Mock = jest.fn();\n    \n        const props: DropdownProps = {\n          data,\n          isDropdownOpen,\n          handleDataChange,\n        };\n    \n        const { getByText } = render(<Dropdown {...props} />);\n    \n        // Assert that the component renders correctly when open\n        expect(getByText('Item 1')).toBeTruthy();\n        expect(getByText('Item 2')).toBeTruthy();\n      });\n  });\n\n  it('does not render when closed', () => {\n    const data = new Set(['Item 1', 'Item 2']);\n    const isOpen = false;\n    const handleDataChange = jest.fn();\n\n    const { queryByText } = render(\n      <Dropdown\n        data={data}\n        isDropdownOpen={isOpen}\n        handleDataChange={handleDataChange}\n      />\n    );\n\n    // Assert that the component does not render when closed\n    expect(queryByText('Item 1')).toBeNull();\n    expect(queryByText('Item 2')).toBeNull();\n  });\n\n  it('calls handleDataChange when an item is pressed', () => {\n    const data = new Set(['Item 1', 'Item 2']);\n    const isOpen = true;\n    const handleDataChange = jest.fn();\n\n    const { getByText } = render(\n      <Dropdown\n        data={data}\n        isDropdownOpen={isOpen}\n        handleDataChange={handleDataChange}\n      />\n    );\n\n    // Simulate a user pressing an item\n    fireEvent.press(getByText('Item 1'));\n\n    // Assert that handleDataChange was called with the correct item\n    expect(handleDataChange).toHaveBeenCalledWith('Item 1');\n  });\n\n","resolvedModuleNames":["/Users/khaledadel/Projects/react-native-dropdown/src/Dropdown.tsx"]}],["/Users/khaledadel/Projects/react-native-dropdown/src/Dropdown.tsx",{"fileContent":"import React from 'react';\nimport {\n  View,\n  ScrollView,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\n\nexport interface DropdownProps {\n    data: Set<string>;\n    isDropdownOpen: boolean;\n    handleDataChange: (item: string) => void;\n    style?: StyleProp<ViewStyle>; // Accept a custom style prop\n  }\n\nconst Dropdown: React.FC<DropdownProps> = (props) => {\n  const {\n    data,\n    isDropdownOpen,\n    handleDataChange,\n    style, // Accept custom styles\n  } = props;\n\n  if (!isDropdownOpen) {\n    return null;\n  }\n\n  // Merge custom styles with default styles\n  const dropdownStyles = StyleSheet.flatten([styles.dropdown, style]);\n\n  return (\n    <ScrollView style={dropdownStyles}>\n      {Array.from(data).map((item, index) => (\n        <TouchableOpacity\n          key={index}\n          onPress={() => handleDataChange(item)}>\n          <Text>{item}</Text>\n        </TouchableOpacity>\n      ))}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  dropdown: {\n    position: 'absolute',\n    top: 40,\n    left: 10,\n    backgroundColor: 'white',\n    padding: 10,\n    borderRadius: 5,\n    elevation: 3,\n    maxHeight: 200,\n    zIndex: 2,\n    overflow: 'scroll',\n  },\n});\n\nexport default Dropdown;\n","resolvedModuleNames":[]}]]