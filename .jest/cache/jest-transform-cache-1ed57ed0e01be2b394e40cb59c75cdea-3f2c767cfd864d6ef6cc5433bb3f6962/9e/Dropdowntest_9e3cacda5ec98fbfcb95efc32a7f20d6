73869e9c0e222dd9c5e76c5c0c3ba7c1
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var Dropdown_1 = __importDefault(require("../src/Dropdown"));
describe('Dropdown component', function () {
  it('renders correctly when open', function () {
    var data = new Set(['Item 1', 'Item 2']);
    var isDropdownOpen = true;
    var handleDataChange = jest.fn();
    var props = {
      data: data,
      isDropdownOpen: isDropdownOpen,
      handleDataChange: handleDataChange
    };
    var _ref = (0, react_native_1.render)(react_1.default.createElement(Dropdown_1.default, Object.assign({}, props))),
      getByText = _ref.getByText;
    expect(getByText('Item 1')).toBeTruthy();
    expect(getByText('Item 2')).toBeTruthy();
  });
});
it('does not render when closed', function () {
  var data = new Set(['Item 1', 'Item 2']);
  var isOpen = false;
  var handleDataChange = jest.fn();
  var _ref2 = (0, react_native_1.render)(react_1.default.createElement(Dropdown_1.default, {
      data: data,
      isDropdownOpen: isOpen,
      handleDataChange: handleDataChange
    })),
    queryByText = _ref2.queryByText;
  expect(queryByText('Item 1')).toBeNull();
  expect(queryByText('Item 2')).toBeNull();
});
it('calls handleDataChange when an item is pressed', function () {
  var data = new Set(['Item 1', 'Item 2']);
  var isOpen = true;
  var handleDataChange = jest.fn();
  var _ref3 = (0, react_native_1.render)(react_1.default.createElement(Dropdown_1.default, {
      data: data,
      isDropdownOpen: isOpen,
      handleDataChange: handleDataChange
    })),
    getByText = _ref3.getByText;
  react_native_1.fireEvent.press(getByText('Item 1'));
  expect(handleDataChange).toHaveBeenCalledWith('Item 1');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiRHJvcGRvd25fMSIsImRlc2NyaWJlIiwiaXQiLCJkYXRhIiwiU2V0IiwiaXNEcm9wZG93bk9wZW4iLCJoYW5kbGVEYXRhQ2hhbmdlIiwiamVzdCIsImZuIiwicHJvcHMiLCJfcmVmIiwicmVuZGVyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiaXNPcGVuIiwiX3JlZjIiLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIiwiX3JlZjMiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiL1VzZXJzL2toYWxlZGFkZWwvUHJvamVjdHMvcmVhY3QtbmF0aXZlLWRyb3Bkb3duL19fdGVzdHNfXy9Ecm9wZG93bi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vc3JjL0Ryb3Bkb3duJztcblxuZXhwb3J0IGludGVyZmFjZSBEcm9wZG93blByb3BzIHtcbiAgICBkYXRhOiBTZXQ8c3RyaW5nPjtcbiAgICBpc0Ryb3Bkb3duT3BlbjogYm9vbGVhbjtcbiAgICBoYW5kbGVEYXRhQ2hhbmdlOiAoaXRlbTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5cbiAgZGVzY3JpYmUoJ0Ryb3Bkb3duIGNvbXBvbmVudCcsICgpID0+IHtcbiAgICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2hlbiBvcGVuJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoWydJdGVtIDEnLCAnSXRlbSAyJ10pO1xuICAgICAgICBjb25zdCBpc0Ryb3Bkb3duT3BlbjogYm9vbGVhbiA9IHRydWU7XG4gICAgICAgIGNvbnN0IGhhbmRsZURhdGFDaGFuZ2U6IGplc3QuTW9jayA9IGplc3QuZm4oKTtcbiAgICBcbiAgICAgICAgY29uc3QgcHJvcHM6IERyb3Bkb3duUHJvcHMgPSB7XG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBpc0Ryb3Bkb3duT3BlbixcbiAgICAgICAgICBoYW5kbGVEYXRhQ2hhbmdlLFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxEcm9wZG93biB7Li4ucHJvcHN9IC8+KTtcbiAgICBcbiAgICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIGNvbXBvbmVudCByZW5kZXJzIGNvcnJlY3RseSB3aGVuIG9wZW5cbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSXRlbSAxJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSXRlbSAyJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgcmVuZGVyIHdoZW4gY2xvc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgU2V0KFsnSXRlbSAxJywgJ0l0ZW0gMiddKTtcbiAgICBjb25zdCBpc09wZW4gPSBmYWxzZTtcbiAgICBjb25zdCBoYW5kbGVEYXRhQ2hhbmdlID0gamVzdC5mbigpO1xuXG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPERyb3Bkb3duXG4gICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgIGlzRHJvcGRvd25PcGVuPXtpc09wZW59XG4gICAgICAgIGhhbmRsZURhdGFDaGFuZ2U9e2hhbmRsZURhdGFDaGFuZ2V9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICAvLyBBc3NlcnQgdGhhdCB0aGUgY29tcG9uZW50IGRvZXMgbm90IHJlbmRlciB3aGVuIGNsb3NlZFxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnSXRlbSAxJykpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdJdGVtIDInKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGhhbmRsZURhdGFDaGFuZ2Ugd2hlbiBhbiBpdGVtIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBTZXQoWydJdGVtIDEnLCAnSXRlbSAyJ10pO1xuICAgIGNvbnN0IGlzT3BlbiA9IHRydWU7XG4gICAgY29uc3QgaGFuZGxlRGF0YUNoYW5nZSA9IGplc3QuZm4oKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8RHJvcGRvd25cbiAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgaXNEcm9wZG93bk9wZW49e2lzT3Blbn1cbiAgICAgICAgaGFuZGxlRGF0YUNoYW5nZT17aGFuZGxlRGF0YUNoYW5nZX1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIC8vIFNpbXVsYXRlIGEgdXNlciBwcmVzc2luZyBhbiBpdGVtXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnSXRlbSAxJykpO1xuXG4gICAgLy8gQXNzZXJ0IHRoYXQgaGFuZGxlRGF0YUNoYW5nZSB3YXMgY2FsbGVkIHdpdGggdGhlIGNvcnJlY3QgaXRlbVxuICAgIGV4cGVjdChoYW5kbGVEYXRhQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnSXRlbSAxJyk7XG4gIH0pO1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsZUFBQSxDQUFBQyxPQUFBO0FBU0VHLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFLO0VBQ2xDQyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsWUFBSztJQUNuQyxJQUFNQyxJQUFJ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